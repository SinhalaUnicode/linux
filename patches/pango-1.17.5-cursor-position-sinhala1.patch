--- pango-1.17.5.orig/modules/indic/indic-lang.c	2007-07-06 07:30:24.000000000 +1000
+++ pango-1.17.5/modules/indic/indic-lang.c	2007-08-01 02:37:56.000000000 +1000
@@ -82,6 +82,14 @@
   INDIC_ENGINE_INFO(sinh)
 };
 
+static void
+bind_chars (PangoLogAttr *attr)
+{
+  attr->is_cursor_position = FALSE;
+  attr->is_char_break = FALSE;
+  attr->is_line_break = FALSE;
+  attr->is_mandatory_break = FALSE;
+}
 
 static void
 indic_engine_break (PangoEngineLang *engine,
@@ -93,9 +101,15 @@
 {
   const gchar *p, *next = NULL, *next_next;
   gunichar prev_wc, this_wc, next_wc, next_next_wc;
-  gboolean makes_rephaya_syllable = FALSE;
+  gboolean is_conjunct = FALSE;
+  gboolean is_sinhala = FALSE;
   int i;
 
+  if (analysis->script == PANGO_SCRIPT_SINHALA)
+  {
+    is_sinhala = TRUE;
+  }
+
   for (p = text, prev_wc = 0, i = 0;
        p != NULL && p < (text + length);
        p = next, prev_wc = this_wc, i++)
@@ -117,59 +131,50 @@
       else
 	next_next_wc = 0;
 
-      if (prev_wc != 0 && this_wc == 0x0DBB &&
-	  next_wc == 0x0DCA && next_next_wc == 0x200D)
-	{
-	  /* Determine whether or not this forms a Rephaya syllable.
-	   * SINHALA LETTER + U+0DBB U+0DCA U+200D + SINHALA LETTER is
-	   * the kind of Rephaya.
-	   */
-	  makes_rephaya_syllable = TRUE;
-	  attrs[i].is_cursor_position = FALSE;
-	  attrs[i].is_char_break = FALSE;
-	  attrs[i].is_line_break = FALSE;
-	  attrs[i].is_mandatory_break = FALSE;
-	}
-      else if (prev_wc == 0x200D &&
-		(makes_rephaya_syllable || this_wc == 0x0DBB || this_wc == 0x0DBA))
-	{
-	  /* fixes the cursor break in Sinhala.
-	   * SINHALA LETTER + SINHALA VOWEL + ZWJ + 0x0DBB/0x0DBA is
-	   * the kind of Rakaransaya/Yansaya. these characters has to
-	   * be dealt as one character.
-	   */
-	  attrs[i].is_cursor_position = FALSE;
-	  attrs[i].is_char_break = FALSE;
-	  attrs[i].is_line_break = FALSE;
-	  attrs[i].is_mandatory_break = FALSE;
-	  makes_rephaya_syllable = FALSE;
-	}
-      else if (this_wc == 0x200D &&
-		((makes_rephaya_syllable && next_wc != 0) ||
-		 (next_wc == 0x0DBB || next_wc == 0x0DBA)))
-	{
-	  attrs[i].is_cursor_position = FALSE;
-	  attrs[i].is_char_break = FALSE;
-	  attrs[i].is_line_break = FALSE;
-	  attrs[i].is_mandatory_break = FALSE;
-	}
+      /*
+       * TODO: The cursor position should be based on the state table.
+       *       This is the wrong place to be doing this.
+       */
+      if (is_sinhala)
+      {
+	/*
+	 * The cursor should treat as a single glyph:
+	 * SINHALA CONS + 0x0DCA + 0x200D + SINHALA CONS
+	 * SINHALA CONS + 0x200D + 0x0DCA + SINHALA CONS
+	 */
+	if ((this_wc == 0x0DCA && next_wc == 0x200D)
+	    || (this_wc == 0x200D && next_wc == 0x0DCA))
+	  {
+	    bind_chars(&attrs[i]);
+	    bind_chars(&attrs[i + 1]);
+	    is_conjunct = TRUE;
+	  }
+	else if (is_conjunct
+		 && (prev_wc == 0x200D || prev_wc == 0x0DCA)
+		 && this_wc >= 0x0D9A
+		 && this_wc <= 0x0DC6)
+	  {
+	    bind_chars(&attrs[i]);
+	    is_conjunct = FALSE;
+	  }
+	/*
+	 * Consonant clusters do NOT result in implicit conjuncts
+	 * in SINHALA orthography.
+	 */
+	else if (!is_conjunct && prev_wc == 0x0DCA && this_wc != 0x200D)
+	  {
+	    attrs[i].is_cursor_position = TRUE;
+	  }
+      }
       else if (prev_wc != 0 && (this_wc == 0x200D || this_wc == 0x200C))
 	{
 	  if (next_wc != 0)
 	    {
 	      if  (next_next_wc == 0)
 		{
-		  attrs[i].is_cursor_position = FALSE;
-		  attrs[i].is_char_break = FALSE;
-		  attrs[i].is_line_break = FALSE;
-		  attrs[i].is_mandatory_break = FALSE;
-
+		  bind_chars(&attrs[i]);
 		  i++;
-
-		  attrs[i].is_cursor_position = FALSE;
-		  attrs[i].is_char_break = FALSE;
-		  attrs[i].is_line_break = FALSE;
-		  attrs[i].is_mandatory_break = FALSE;
+		  bind_chars(&attrs[i]);
 		}
 	      else if ((next_next_wc != 0) &&
 		       (next_wc == 0x09CD ||	/* Bengali */
@@ -180,31 +185,18 @@
 			next_wc == 0x0B4D ||	/* Oriya */
 			next_wc == 0x0A4D ||	/* Punjabi */
 			next_wc == 0x0BCD ||	/* Tamil */
-			next_wc == 0x0C4D ||	/* Telugu */
-			next_wc == 0x0DCA))  /*Sinhala*/
+			next_wc == 0x0C4D))	/* Telugu */
 		{
-		  attrs[i].is_cursor_position = FALSE;
-		  attrs[i].is_char_break = FALSE;
-		  attrs[i].is_line_break = FALSE;
-		  attrs[i].is_mandatory_break = FALSE;
-
+		  bind_chars(&attrs[i]);
 		  i++;
-
-		  attrs[i].is_cursor_position = FALSE;
-		  attrs[i].is_char_break = FALSE;
-		  attrs[i].is_line_break = FALSE;
-		  attrs[i].is_mandatory_break = FALSE;
-
+		  bind_chars(&attrs[i]);
 		  i++;
 		  attrs[i].is_cursor_position = FALSE;
 		}
 	    }
 	  else
 	    {
-	      attrs[i].is_cursor_position = FALSE;
-	      attrs[i].is_char_break = FALSE;
-	      attrs[i].is_line_break = FALSE;
-	      attrs[i].is_mandatory_break = FALSE;
+	      bind_chars(&attrs[i]);
 	    }
 	}
     }
